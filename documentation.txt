
                                Basic Start
------------------------------------[]------------------------------------
php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');" 
For the composer

composer create-project laravel/laravel DataTables
Created the base app

php artisan serve 
Start it
Made the local host database:
datatablesproj

Made connections in the .env file 

composer require elibyy/tcpdf-laravel
------------------------------------[]------------------------------------

                                  Yajra
------------------------------------[]------------------------------------
composer require laravel/ui --dev  
php artisan ui bootstrap --auth
 
composer require yajra/laravel-datatables:^9.0

///for datatables
npm i laravel-datatables-vite --save-dev 

resources/js/app.js
import 'laravel-datatables-vite';

resources/sass/app.scss
// DataTables
@import 'bootstrap-icons/font/bootstrap-icons.css';
@import "datatables.net-bs5/css/dataTables.bootstrap5.min.css";
@import "datatables.net-buttons-bs5/css/buttons.bootstrap5.min.css";
@import 'datatables.net-select-bs5/css/select.bootstrap5.css';

npm run dev

Make The DataTables file (its for looking for something in the database)
php artisan datatables:make Users

at the columns part you can edit the column names to look for

Call these in the app.blade.php
<!-- CSS only -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">

<!-- JavaScript Bundle with Popper -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4" crossorigin="anonymous"></script>    <script src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js"></script>

------------------------------------[]------------------------------------

                        Controller & Route & View
------------------------------------[]------------------------------------
Make a Controller for it

php artisan make:controller UsersController

app/Http/Controllers/UsersController.php
    public function index(Request $request)
    {
        if ($request->ajax()) {
            $data = User::select('id','name','email','birth_date','title')->get();
            return Datatables::of($data)->addIndexColumn()
                ->make(true);
        }
 
        return view('users.index');
    }

This is the base page for the datatable:

@extends('layouts.app')

@section('content')
<div class="container mt-5">
    <table class="table table-bordered yajra-datatable">
        <thead>
            <tr>
                <th>No</th>
                <th>Name</th>
                <th>Email</th>
                <th>Age</th>
                <th>Title</th>
            </tr>
        </thead>
         <tbody>
        </tbody>
    </table>
</div>
   
</body>

<script type="text/javascript">
  $(function () {
    
    var table = $('.yajra-datatable').DataTable({
        processing: true,
        serverSide: true,
        ajax: "{{ route('users.index') }}",
        pagingType: 'full_numbers',
        columns: [
            {data: 'DT_RowIndex', name: 'DT_RowIndex'},
            {data: 'name', name: 'name'},
            {data: 'email', name: 'email'},
            {data: 'birth_date', name: 'birth_date'},
            {data: 'title', name: 'title'},
        ]
        
    });
    
  });
</script>
@endsection

Make a Route for it in web
Route::get('/users', [UsersController::class, 'index'])->name('users.index');

input this before the body end:
    @stack('scripts')
------------------------------------[]------------------------------------

                               Migrate Seed
------------------------------------[]------------------------------------
Edit the migrations files as ur liking:
\database\migrations\{name}
You can edit the factory file wich is the "seeder" 
\database\factory\{name}

to migrate and seed it simply 
php artisan migrate

Go into the tinker mode
php artisan tinker

Call the model 
User::factory(10)->create()

php artisan serve
if not works use 
npm run dev 

this example will be avaliable on /users route
------------------------------------[]------------------------------------







                            Scripts for Table
------------------------------------[]------------------------------------
The base datatables script is:
<script>
    $(document).ready(function () {
    $('#datatable').DataTable({
                                                <---I
    });                                             I
});                                                 I
</script>                                           I
                                                    I
if you want pagination you just have to put there:  I
pagingType: 'full_numbers',
pagination types:
'numbers' Page number buttons only
'simple' Only Previous and next Buttons
'simple_numbers' both of them 
'full' first Previous next last buttons
'full_numbers' the lastone and numbers
'first_last_numbers' should be clear



Order by Something:
$a = is the index of column starting with 0
(please insert a number not a variable there its just for clearance same with the desc/asc only one of them (order: [[3, 'desc']],) ):
order: [[{a}, {desc/asc} ]],


you can group the ordering if you want to order by more columns

columnDefs: [
        {
            targets: [0],         
            orderData: [0, 1],
        },
        {
            targets: [1],
            orderData: [1, 0],
        },
        {
            targets: [4],
            orderData: [4, 0],
        },
    ],


if you want to display multiple tables name them the same id:
$('table.display').DataTable();


Hiding columns same as the ordering target is the column index

columnDefs: [
            {
                target: 2,
                visible: false,
                searchable: false,
            },
            {
                target: 3,
                visible: false,
            },

if you want to flip move or do something with the pagination search or something within the datatable script items search up 
DOM Positioning on the datatable website

Resizing like any normal table css:
<table style='width:100%> 

You can cache the ordering and paging state by it stores it in the localStorage and sessionStorage:
stateSave: true,

The duration is saved in seconds if you want 24h it looks like this:
stateDuration:60*60*24 

for stateSaveCallback and stateLoadCallback go to this site:
https://datatables.net/examples/basic_init/state_save.html

data rendering for picture, progressbar:
https://datatables.net/examples/basic_init/data_rendering.html

If you want scrollable table turn off paging:
    scrollY: '200px',  ///'50vh'
    scrollCollapse: true,
    paging: false,

You can enable the horizontal scrolling with:
    scrollX: true,
You can Use both at the same time


For decimal separators:
        language: {
            decimal: ',',
            thousands: '.',
        }, 


footer search
// Setup - add a text input to each footer cell
    $('#example tfoot th').each(function () {
        var title = $(this).text();
        $(this).html('<input type="text" placeholder="Search ' + title + '" />');
    });
 
    // DataTable
    var table = $('#example').DataTable({
        initComplete: function () {
            // Apply the search
            this.api()
                .columns()
                .every(function () {
                    var that = this;
 
                    $('input', this.footer()).on('keyup change clear', function () {
                        if (that.search() !== this.value) {
                            that.search(this.value).draw();
                        }
                    });
                });
        },
    });
------------------------------------[]------------------------------------